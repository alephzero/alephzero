name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  ubuntu:
    name: Ubuntu

    strategy:
      matrix:
        os: ["ubuntu:18.04", "ubuntu:20.04"]
        compiler: ["gcc", "clang"]
        include:
        - compiler: "gcc"
          apt: "g++"
          CC: "gcc"
          CXX: "g++"
        - compiler: "clang"
          apt: "clang"
          CC: "clang"
          CXX: "clang++"

    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y make ${{ matrix.apt }}
    - name: run
      run: CC=${{ matrix.CC }} CXX=${{ matrix.CXX }} make test -j A0_EXT_NLOHMANN=1

  alpine:
    name: Alpine

    strategy:
      matrix:
        compiler: ["gcc", "clang", "musl"]
        include:
        - compiler: "gcc"
          CC: "gcc"
          CXX: "g++"
        - compiler: "clang"
          CC: "clang"
          CXX: "clang++"
        - compiler: "musl"
          CC: "x86_64-alpine-linux-musl-gcc"
          CXX: "x86_64-alpine-linux-musl-g++"

    runs-on: ubuntu-latest
    container:
      image: "alpine:3.11"

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      shell: sh
      run: apk add --no-cache clang g++ linux-headers make
    - name: run
      shell: sh
      run: CC=${{ matrix.CC }} CXX=${{ matrix.CXX }} make test -j A0_EXT_NLOHMANN=1

  sanitizer:
    name: Sanitizer

    runs-on: ubuntu-latest
    container:
      image: "ubuntu:20.04"

    strategy:
      matrix:
        san: ["asan", "tsan", "ubsan"]

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: make ${{ matrix.san }} -j A0_EXT_NLOHMANN=1

  valgrind:
    name: Valgrind

    runs-on: ubuntu-latest
    container:
      image: "ubuntu:20.04"

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make valgrind
    - name: run
      run: make valgrind -j A0_EXT_NLOHMANN=1

  iwyu:
    name: Include What You Use

    runs-on: ubuntu-latest
    container:
      image: "ubuntu:20.04"

    strategy:
      matrix:
        A0_EXT_NLOHMANN: [0, 1]

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang-9 iwyu make
    - name: run
      run: |
        make iwyu -j A0_EXT_NLOHMANN=${{ matrix.A0_EXT_NLOHMANN }}

  clang_tidy:
    name: Clang-Tidy

    runs-on: ubuntu-latest
    container:
      image: "ubuntu:20.04"

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang-tidy
    - name: run
      run: |
        export CXFLAGS="-Iinclude -Ithird_party/yyjson/src"
        export CXXFLAGS="-std=c++11 -I. -DA0_EXT_NLOHMANN=1 -Ithird_party/json/single_include"
        clang-tidy include/**/*.h src/*.c src/*.h -- $CXFLAGS
        clang-tidy include/**/*.hpp src/*.cpp src/*.hpp -- $CXFLAGS $CXXFLAGS

  format:
    name: Format

    runs-on: ubuntu-latest
    container:
      image: "ubuntu:20.04"

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang-format git
    - name: run
      shell: bash
      run: |
        find ./include/ ./src/ -name '*.[ch]' -o -name '*.[ch]pp' | xargs \
          clang-format --dry-run --Werror --style=file

  cov:
    name: Code Coverage

    runs-on: ubuntu-latest
    container:
      image: "ubuntu:20.04"

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y ca-certificates curl g++ make
    - name: run
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        make cov -j A0_EXT_NLOHMANN=1
        # Use action when https://github.com/codecov/codecov-action/issues/24 is resolved
        curl -o ./codecov https://codecov.io/bash
        chmod +x ./codecov
        ./codecov
