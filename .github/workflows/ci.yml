name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  bionic_gcc:
    name: Ubuntu Bionic Default GCC

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:18.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: make test -j

  focal_gcc:
    name: Ubuntu Focal Default GCC

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: make test -j

  alpine_gcc:
    name: Alpine GCC

    runs-on: ubuntu-latest
    container:
      image: 'alpine:3.11'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      shell: sh
      run: apk add --no-cache g++ linux-headers make
    - name: run
      shell: sh
      run: make test -j

  bionic_clang:
    name: Ubuntu Bionic Default Clang

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:18.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang make
    - name: run
      run: CC=clang CXX=clang++ make test -j

  focal_clang:
    name: Ubuntu Focal Default Clang

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang make
    - name: run
      run: CC=clang CXX=clang++ make test -j

  alpine_clang:
    name: Alpine Clang

    runs-on: ubuntu-latest
    container:
      image: 'alpine:3.11'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      shell: sh
      run: apk add --no-cache clang g++ linux-headers make
    - name: run
      shell: sh
      run: CC=clang CXX=clang++ make test -j

  alpine_musl:
    name: Alpine Musl

    runs-on: ubuntu-latest
    container:
      image: 'alpine:3.11'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      shell: sh
      run: apk add --no-cache g++ linux-headers make
    - name: run
      shell: sh
      run: CC=x86_64-alpine-linux-musl-gcc CXX=x86_64-alpine-linux-musl-g++ make test -j

  third_party:
    name: Third Party Extensions

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: |
       make clean && make test -j A0_C_CONFIG_USE_YYJSON=1
       make clean && make test -j A0_CXX_CONFIG_USE_NLOHMANN=1

  asan:
    name: Address Sanitizer

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: make asan -j

  tsan:
    name: Thread Sanitizer

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: make tsan -j

  ubsan:
    name: Undefined Behavior Sanitizer

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: make ubsan -j

  valgrind:
    name: Valgrind

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make valgrind
    - name: run
      run: make valgrind -j

  iwyu:
    name: Include What You Use

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang-9 iwyu make
    - name: run
      run: make iwyu -j

  clang_tidy:
    name: Clang-Tidy

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang-tidy
    - name: run
      run: |
        clang-tidy include/**/*.h src/*.c src/*.h -- -Iinclude
        clang-tidy include/**/*.hpp src/*.cpp src/*.hpp -- -Iinclude -I. -std=c++11

  format:
    name: Format

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang-format git
    - name: run
      shell: bash
      run: |
        shopt -s globstar
        git init
        git config --global user.name "none"
        git config --global user.email "none"
        git add **
        git commit -am "INITIAL STATE"
        clang-format -i --style=file include/** src/** || true
        git --no-pager diff --exit-code

  cov:
    name: Code Coverage

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v2
    - name: install deps
      run: apt update && apt install --no-install-recommends -y ca-certificates curl g++ make
    - name: run
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        make cov -j
        # Use action when https://github.com/codecov/codecov-action/issues/24 is resolved
        curl -o ./codecov https://codecov.io/bash
        chmod +x ./codecov
        ./codecov
