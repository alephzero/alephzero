name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  bionic_gcc:
    name: Ubuntu Bionic Default GCC

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:18.04'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: make test -j A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1

  focal_gcc:
    name: Ubuntu Focal Default GCC

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: make test -j A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1

  alpine_gcc:
    name: Alpine GCC

    runs-on: ubuntu-latest
    container:
      image: 'alpine:3.11'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      shell: sh
      run: apk add --no-cache g++ linux-headers make
    - name: run
      shell: sh
      run: make test -j A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1

  bionic_clang:
    name: Ubuntu Bionic Default Clang

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:18.04'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang make
    - name: run
      run: CC=clang CXX=clang++ make test -j A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1

  focal_clang:
    name: Ubuntu Focal Default Clang

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang make
    - name: run
      run: CC=clang CXX=clang++ make test -j A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1

  alpine_clang:
    name: Alpine Clang

    runs-on: ubuntu-latest
    container:
      image: 'alpine:3.11'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      shell: sh
      run: apk add --no-cache clang g++ linux-headers make
    - name: run
      shell: sh
      run: CC=clang CXX=clang++ make test -j A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1

  alpine_musl:
    name: Alpine Musl

    runs-on: ubuntu-latest
    container:
      image: 'alpine:3.11'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      shell: sh
      run: apk add --no-cache g++ linux-headers make
    - name: run
      shell: sh
      run: CC=x86_64-alpine-linux-musl-gcc CXX=x86_64-alpine-linux-musl-g++ make test -j  A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1

  asan:
    name: Address Sanitizer

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: make asan -j A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1

  tsan:
    name: Thread Sanitizer

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: make tsan -j A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1

  ubsan:
    name: Undefined Behavior Sanitizer

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make
    - name: run
      run: make ubsan -j A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1

  valgrind:
    name: Valgrind

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y g++ make valgrind
    - name: run
      run: make valgrind -j A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1

  iwyu:
    name: Include What You Use

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    strategy:
      matrix:
        A0_EXT_YYJSON: [0, 1]
        A0_EXT_NLOHMANN: [0, 1]

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang-9 iwyu make
    - name: run
      run: |
        make iwyu -j A0_EXT_YYJSON=${{ matrix.A0_EXT_YYJSON }} A0_EXT_NLOHMANN=${{ matrix.A0_EXT_NLOHMANN }}

  clang_tidy:
    name: Clang-Tidy

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang-tidy
    - name: run
      run: |
        export CXFLAGS="-Iinclude -DA0_EXT_YYJSON=1 -Ithird_party/yyjson/src"
        export CXXFLAGS="-std=c++11 -I. -DA0_EXT_NLOHMANN=1 -Ithird_party/json/single_include"
        clang-tidy include/**/*.h src/*.c src/*.h -- $CXFLAGS
        clang-tidy include/**/*.hpp src/*.cpp src/*.hpp -- $CXFLAGS $CXXFLAGS

  format:
    name: Format

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y clang-format git
    - name: run
      shell: bash
      run: |
        find ./include/ ./src/ -name '*.[ch]' -o -name '*.[ch]pp' | xargs \
          clang-format -i --style=file --verbose
        git --no-pager diff --exit-code

  cov:
    name: Code Coverage

    runs-on: ubuntu-latest
    container:
      image: 'ubuntu:20.04'

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: install deps
      run: apt update && apt install --no-install-recommends -y ca-certificates curl g++ make
    - name: run
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        make cov -j A0_EXT_YYJSON=1 A0_EXT_NLOHMANN=1
        # Use action when https://github.com/codecov/codecov-action/issues/24 is resolved
        curl -o ./codecov https://codecov.io/bash
        chmod +x ./codecov
        ./codecov
